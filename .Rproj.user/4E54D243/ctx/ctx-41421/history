width = 800,
verbose = TRUE, ...) {
# if ("topic_label" %in% colnames(top_topic_terms)) {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = topic_label)
# } else {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = paste("Topic", topic))
# }
# if (!is.null(topic_label) && length(topic_label) > 0) {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(
#       labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
#                              topic_label[as.character(topic)],
#                              labeled_topic)
#     )
# }
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, topic, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic = topic,
topic_label = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
if ("topic_label" %in% colnames(top_topic_terms)) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = topic_label)
} else {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = paste("Topic", topic))
}
if (!is.null(topic_label) && length(topic_label) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
topic_label[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, topic, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities(top_labeled_topic_terms, topic_label = ListCallback, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities(top_labeled_topic_terms, topic_label = list, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic = topic,
labeled_topic = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
# if ("topic_label" %in% colnames(top_topic_terms)) {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = topic_label)
# } else {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = paste("Topic", topic))
# }
if (!is.null(topic_label) && length(topic_label) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
topic_label[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, labeled_topic = list, = list, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities(top_labeled_topic_terms, labeled_topic = list, = list, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities(top_labeled_topic_terms, labeled_topic = list, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic = topic,
labeled_topic = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
# if ("topic_label" %in% colnames(top_topic_terms)) {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = topic_label)
# } else {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(labeled_topic = paste("Topic", topic))
# }
# if (!is.null(topic_label) && length(topic_label) > 0) {
#   top_topic_terms <- top_topic_terms %>%
#     dplyr::mutate(
#       labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
#                              topic_label[as.character(topic)],
#                              labeled_topic)
#     )
# }
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, labeled_topic = list, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic = topic,
topic_label = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
if ("topic_label" %in% colnames(top_topic_terms)) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = topic_label)
} else {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = paste("Topic", topic))
}
if (!is.null(topic_label) && length(topic_label) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
topic_label[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, topic_label = topic_label, ncol = 3, height = 1200, width = 800, verbose = TRUE)
top_labeled_topic_terms
plot_word_probabilities(top_labeled_topic_terms, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic = topic,
topic_label = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
if ("topic_label" %in% colnames(top_topic_terms)) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = topic_label)
} else {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = paste("Topic", topic))
}
if (!is.null(topic_label) && length(topic_label) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
topic_label[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic_label = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
if (!is.null(topic_label) && topic_label %in% colnames(top_topic_terms)) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = .data[[topic_label]])
} else {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = paste("Topic", topic))
}
# Overwrite the labeled_topic with user_labels if provided
if (!is.null(user_labels) && length(user_labels) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(user_labels[as.character(topic)]),
user_labels[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, ncol = 3, height = 1200, width = 800, verbose = TRUE)
plot_word_probabilities <- function(top_topic_terms,
topic_label = NULL,
ncol = 3,
height = 1200,
width = 800,
verbose = TRUE, ...) {
if ("topic_label" %in% colnames(top_topic_terms)) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = topic_label)
} else {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(labeled_topic = paste("Topic", topic))
}
if (!is.null(topic_label) && length(topic_label) > 0) {
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
labeled_topic = ifelse(!is.na(topic_label[as.character(topic)]),
topic_label[as.character(topic)],
labeled_topic)
)
}
top_topic_terms <- top_topic_terms %>%
dplyr::mutate(
ord = factor(topic, levels = seq(min(topic), max(topic))),
tt = as.numeric(topic),
term = tidytext::reorder_within(term, beta, labeled_topic)
) %>%
dplyr::arrange(ord) %>%
dplyr::ungroup()
levelt <- unique(top_topic_terms$labeled_topic)
top_topic_terms$labeled_topic <- factor(top_topic_terms$labeled_topic, levels = levelt)
topic_term_plot_gg <- ggplot(
top_topic_terms,
aes(term, beta, fill = labeled_topic, text = paste("Topic:", labeled_topic, "<br>Beta:", sprintf("%.3f", beta)))
) +
geom_col(show.legend = FALSE, alpha = 0.9) +
facet_wrap(~ labeled_topic, scales = "free", ncol = ncol, strip.position = "top") +
tidytext::scale_x_reordered() +
scale_y_continuous(labels = numform::ff_num(zero = 0, digits = 3)) +
coord_flip() +
xlab("") +
ylab("Word probability") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B", margin = margin(b = 30, t = 15)),
axis.text.x = element_text(size = 11, color = "#3B3B3B", hjust = 1, margin = margin(t = 20)),
axis.text.y = element_text(size = 11, color = "#3B3B3B", margin = margin(r = 20)),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 25)),
axis.title.y = element_text(margin = margin(r = 25)),
plot.margin = margin(t = 40, b = 40)
)
plotly::ggplotly(topic_term_plot_gg, height = height, width = width, tooltip = "text") %>%
plotly::layout(
margin = list(t = 40, b = 40)
)
}
plot_word_probabilities(top_labeled_topic_terms, ncol = 3, height = 1200, width = 800, verbose = TRUE)

tibble::as_tibble() %>%
group_by(!!rlang::sym(continuous_variable)) %>%
mutate(
con_3_total = sum(count),
term_proportion = count / con_3_total
) %>%
ungroup()
con_var_term_gg <- con_var_term_counts %>%
mutate(term = factor(term, levels = selected_terms)) %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
filter(term %in% selected_terms) %>%
ggplot(aes(
x = !!rlang::sym(continuous_variable),
y = term_proportion,
group = term
)) +
geom_point(color = "#337ab7", alpha = 0.6, size = 1) +
geom_line(color = "#337ab7", alpha = 0.6, linewidth = 0.5) +
facet_wrap(~ term, scales = "free") +
scale_y_continuous(labels = scales::percent_format()) +
labs(y = "Term Proportion (%)") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B"),
axis.text.x = element_text(size = 11, color = "#3B3B3B"),
axis.text.y = element_text(size = 11, color = "#3B3B3B"),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 9)),
axis.title.y = element_text(margin = margin(r = 11))
)
con_var_term_plotly <- plotly::ggplotly(
con_var_term_gg,
height = height,
width = width
) %>%
plotly::layout(
margin = list(l = 40, r = 150, t = 60, b = 40)
)
significance_results <- con_var_term_counts %>%
mutate(word = term) %>%
filter(word %in% selected_terms) %>%
group_by(word) %>%
do(
broom::tidy(
glm(
cbind(count, con_3_total - count) ~ bs(!!rlang::sym(continuous_variable)),
weights = con_3_total,
family = binomial(link = "logit"),
data = .
)
)
) %>%
mutate(`odds ratio` = exp(estimate)) %>%
rename(`logit` = estimate) %>%
ungroup()
significance_results_tables <- significance_results %>%
mutate(word = factor(word, levels = selected_terms)) %>%
arrange(word) %>%
group_by(word) %>%
group_map(~ {
tagList(
tags$div(
style = "margin-bottom: 20px;",
tags$p(
style = "font-weight: bold; text-align: center;",
.y$word
)
),
.x %>%
mutate_if(is.numeric, ~ round(., 3)) %>%
DT::datatable(
rownames = FALSE,
extensions = 'Buttons',
options = list(
scrollX = TRUE,
scrollY = "400px",
width = "80%",
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
)
) %>%
DT::formatStyle(
`font-size` = "16px"
)
)
})
list(
plot = con_var_term_plotly,
table = tagList(significance_results_tables) %>% browsable()
)
}
df <- TextAnalysisR::SpecialEduTech
united_tbl <- TextAnalysisR::unite_text_cols(df, listed_vars = c("title", "keyword", "abstract"))
tokens <- TextAnalysisR::preprocess_texts(united_tbl, text_field = "united_texts")
dfm_object <- quanteda::dfm(tokens)
stm_15 <- TextAnalysisR::stm_15
term_proportion(
dfm_object,
stm_model = stm_15,
continuous_variable = "year",
selected_terms = c("calculator", "computer"),
height = 500,
width = 900)$table
library(tidyverse)
library(plotly)
term_proportion(
dfm_object,
stm_model = stm_15,
continuous_variable = "year",
selected_terms = c("calculator", "computer"),
height = 500,
width = 900)$table
term_proportion <- function(dfm_object,
stm_model,
continuous_variable,
selected_terms,
height = 500,
width = 900) {
if (!requireNamespace("htmltools", quietly = TRUE) || !requireNamespace("splines", quietly = TRUE)) {
stop(
"Both 'htmltools' and 'splines' packages are required for this functionality. ",
"Please ensure both packages are installed."
)
}
library(htmltools)
library(splines)
dfm_outcome_obj <- dfm_object
dfm_td <- tidytext::tidy(dfm_object)
gamma_td <-
tidytext::tidy(
stm_model,
matrix = "gamma",
document_names = rownames(dfm_object)
)
dfm_outcome_obj@docvars$document <- dfm_outcome_obj@docvars$docname_
dfm_gamma_td <- gamma_td %>%
left_join(dfm_outcome_obj@docvars,
by = c("document" = "document")) %>%
left_join(dfm_td, by = c("document" = "document"), relationship = "many-to-many")
con_var_term_counts <- dfm_gamma_td %>%
tibble::as_tibble() %>%
group_by(!!rlang::sym(continuous_variable)) %>%
mutate(
con_3_total = sum(count),
term_proportion = count / con_3_total
) %>%
ungroup()
con_var_term_gg <- con_var_term_counts %>%
mutate(term = factor(term, levels = selected_terms)) %>%
mutate(across(where(is.numeric), ~ round(., 3))) %>%
filter(term %in% selected_terms) %>%
ggplot(aes(
x = !!rlang::sym(continuous_variable),
y = term_proportion,
group = term
)) +
geom_point(color = "#337ab7", alpha = 0.6, size = 1) +
geom_line(color = "#337ab7", alpha = 0.6, linewidth = 0.5) +
facet_wrap(~ term, scales = "free") +
scale_y_continuous(labels = scales::percent_format()) +
labs(y = "Term Proportion (%)") +
theme_minimal(base_size = 11) +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#3B3B3B", linewidth = 0.3),
axis.ticks = element_line(color = "#3B3B3B", linewidth = 0.3),
strip.text.x = element_text(size = 11, color = "#3B3B3B"),
axis.text.x = element_text(size = 11, color = "#3B3B3B"),
axis.text.y = element_text(size = 11, color = "#3B3B3B"),
axis.title = element_text(size = 11, color = "#3B3B3B"),
axis.title.x = element_text(margin = margin(t = 9)),
axis.title.y = element_text(margin = margin(r = 11))
)
con_var_term_plotly <- plotly::ggplotly(
con_var_term_gg,
height = height,
width = width
) %>%
plotly::layout(
margin = list(l = 40, r = 150, t = 60, b = 40)
)
significance_results <- con_var_term_counts %>%
mutate(word = term) %>%
filter(word %in% selected_terms) %>%
group_by(word) %>%
do(
broom::tidy(
glm(
cbind(count, con_3_total - count) ~ bs(!!rlang::sym(continuous_variable)),
weights = con_3_total,
family = binomial(link = "logit"),
data = .
)
)
) %>%
mutate(`odds ratio` = exp(estimate)) %>%
rename(`logit` = estimate) %>%
ungroup()
significance_results_tables <- significance_results %>%
mutate(word = factor(word, levels = selected_terms)) %>%
arrange(word) %>%
group_by(word) %>%
group_map(~ {
tagList(
tags$div(
style = "margin-bottom: 20px;",
tags$p(
style = "font-weight: bold; text-align: center;",
.y$word
)
),
.x %>%
mutate_if(is.numeric, ~ round(., 3)) %>%
DT::datatable(
rownames = FALSE,
extensions = 'Buttons',
options = list(
scrollX = TRUE,
scrollY = "400px",
width = "80%",
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
)
) %>%
DT::formatStyle(
columns = names(.x),
`font-size` = "16px"
)
)
})
list(
plot = con_var_term_plotly,
table = tagList(significance_results_tables) %>% browsable()
)
}
term_proportion(
dfm_object,
stm_model = stm_15,
continuous_variable = "year",
selected_terms = c("calculator", "computer"),
height = 500,
width = 900)$table
shiny::runApp('inst/TextAnalysisR.app')
pkgdown::clean_site()
pkgdown::clean_site()
shiny::runApp('inst/TextAnalysisR.app')
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::clean_site()
pkgdown::build_site()
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
df <- TextAnalysisR::SpecialEduTech
united_tbl <- TextAnalysisR::unite_text_cols(df, listed_vars = c("title", "keyword", "abstract"))
tokens <- TextAnalysisR::preprocess_texts(united_tbl, text_field = "united_texts")
dfm_object <- quanteda::dfm(tokens)
dfm_object@docvars$docid_
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
tidytext::tidy(dfm_object)
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
tidytext::tidy(dfm_object)
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
top_topic_terms <- beta_td %>%
dplyr::group_by(topic) %>%
dplyr::slice_max(order_by = beta, n = top_term_n) %>%
dplyr::ungroup()
runApp('inst/TextAnalysisR.app')
setwd("C:/Users/shinm/Dropbox/apps/TextAnalysisR/inst/TextAnalysisR.app")
shiny::runApp()
runApp()
setwd("C:/Users/shinm/Dropbox/apps/TextAnalysisR/inst/TextAnalysisR.app")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

edge_data <- igraph::as_data_frame(graph, what = "edges") %>%
dplyr::mutate(x    = layout_df$x[match(from, layout_df$label)],
y    = layout_df$y[match(from, layout_df$label)],
xend = layout_df$x[match(to, layout_df$label)],
yend = layout_df$y[match(to, layout_df$label)],
correlation = correlation) %>%
dplyr::select(from, to, x, y, xend, yend, correlation) %>%
dplyr::mutate(line_group = as.integer({
b <- unique(stats::quantile(correlation, probs = seq(0, 1, length.out = 6), na.rm = TRUE))
if (length(b) < 2) {
b <- c(b, b[length(b)] + 1e-6)
}
cut(correlation, breaks = b, include.lowest = TRUE)
}),
line_width = scales::rescale(line_group, to = c(1, 5)),
alpha      = scales::rescale(line_group, to = c(0.1, 0.3)))
edge_group_labels <- edge_data %>%
group_by(line_group) %>%
dplyr::summarise(
min_corr = min(correlation, na.rm = TRUE),
max_corr = max(correlation, na.rm = TRUE)
) %>%
dplyr::mutate(label = paste0("Correlation: ", round(min_corr, 2), " - ", round(max_corr, 2))) %>%
dplyr::pull(label)
node_data <- layout_df %>%
dplyr::mutate(
degree_log = log1p(degree),
size = scales::rescale(degree_log, to = c(12, 30)),
text_size = scales::rescale(degree_log, to = c(14, 20)),
alpha = scales::rescale(degree_log, to = c(0.2, 1)),
hover_text = paste(
"Word:", label,
"<br>Degree:", degree,
"<br>Betweenness:", round(betweenness, 2),
"<br>Closeness:", round(closeness, 2),
"<br>Eigenvector:", round(eigenvector, 2),
"<br>Community:", community,
if (!is.null(doc_var)) {
if (length(docvar_levels) > 1) {
paste0("<br>", doc_var, ": ", group_level)
} else {
paste0("<br>", doc_var)
}
} else ""
)
)
n_communities <- length(unique(node_data$community))
if (n_communities >= 3 && n_communities <= 8) {
palette <- RColorBrewer::brewer.pal(n_communities, "Set2")
} else if (n_communities > 8) {
palette <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Set2"))(n_communities)
} else if (n_communities > 0 && n_communities < 3) {
palette <- RColorBrewer::brewer.pal(3, "Set2")[1:n_communities]
} else {
palette <- rep("#000000", n_communities)
}
node_data$community <- factor(node_data$community, levels = unique(node_data$community))
community_levels <- levels(node_data$community)
names(palette) <- community_levels
node_data$color <- palette[as.character(node_data$community)]
p <- plotly::plot_ly(type = 'scatter', mode = 'markers', width = width, height = height)
for (lg in unique(edge_data$line_group)) {
esub <- dplyr::filter(edge_data, line_group == lg) %>%
dplyr::mutate(mid_x = (x + xend) / 2,
mid_y = (y + yend) / 2)
if (nrow(esub) > 0) {
p <- p %>%
plotly::add_segments(data = esub, x = ~x, y = ~y,
xend = ~xend, yend = ~yend,
line = list(color = '#5C5CFF', width = ~line_width),
hoverinfo = 'none', opacity = ~alpha,
showlegend = TRUE, name = edge_group_labels[lg],
legendgroup = "Edges") %>%
plotly::add_trace(data = esub, x = ~mid_x, y = ~mid_y, type = 'scatter',
mode = 'markers',
marker = list(size = 0.1, color = '#e0f7ff', opacity = 0),
text = ~paste("Correlation:", correlation,
"<br>Source:", from,
"<br>Target:", to),
hoverinfo = 'text', showlegend = FALSE)
}
}
for(comm in community_levels) {
comm_data <- dplyr::filter(node_data, community == comm)
p <- p %>% plotly::add_markers(data = comm_data, x = ~x, y = ~y,
marker = list(size = ~size, color = palette[comm],
showscale = FALSE,
line = list(width = 3, color = '#FFFFFF')),
hoverinfo = 'text', text = ~hover_text,
showlegend = TRUE, name = paste("Community", comm),
legendgroup = "Community")
}
top_nodes <- dplyr::arrange(node_data, desc(degree)) %>% head(top_node_n)
annotations <- lapply(1:nrow(top_nodes), function(i) {
list(x = top_nodes$x[i],
y = top_nodes$y[i],
text = top_nodes$label[i],
xanchor = ifelse(top_nodes$x[i] > 0, "left", "right"),
yanchor = ifelse(top_nodes$y[i] > 0, "bottom", "top"),
xshift = ifelse(top_nodes$x[i] > 0, 5, -5),
yshift = ifelse(top_nodes$y[i] > 0, 3, -3),
showarrow = FALSE,
font = list(size = top_nodes$text_size[i], color = 'black'))
})
p <- p %>% plotly::layout(dragmode = "pan",
title = list(text = "Word Correlation Network", font = list(size = 16)),
showlegend = TRUE,
xaxis = list(title = "", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(title = "", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
margin = list(l = 40, r = 100, t = 60, b = 40),
annotations = annotations,
legend = list(title = list(text = "Correlation"),
orientation = "v", x = 1.1, y = 1,
xanchor = "left", yanchor = "top"))
list(plot = p, layout_df = layout_df, graph = graph)
}
if (!is.null(doc_var) && length(docvar_levels) > 1) {
plots_list <- dfm_td %>%
dplyr::ungroup() %>%
dplyr::group_by(!!rlang::sym(doc_var)) %>%
dplyr::group_map(~ {
group_level <- .y[[doc_var]]
print(paste("Processing group level:", group_level))
if (is.null(group_level)) {
stop("doc_var is missing or not found in the current group")
}
net <- build_network_plot(.x, group_level)
if (!is.null(net)) {
net$plot %>% plotly::layout(
annotations = list(
list(
text = paste("<b>", group_level, "</b>"),
x = 0.42,
xanchor = "center",
y = 0.98,
yanchor = "bottom",
yref = "paper",
showarrow = FALSE,
font = list(size = 19, color = "black", family = "Arial")
)
)
)
} else {
NULL
}
})
combined_plot <- plotly::subplot(plots_list, nrows = 1, shareX = TRUE, shareY = TRUE,
titleX = TRUE, titleY = TRUE)
table_list <- lapply(docvar_levels, function(level) {
print(paste("Generating table for level:", level))
group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)
net <- build_network_plot(group_data)
if (!is.null(net)) build_table(net, level) else NULL
})
summary_list <- lapply(docvar_levels, function(level) {
print(paste("Generating summary for level:", level))
group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)
net <- build_network_plot(group_data)
if (!is.null(net)) build_summary(net, level) else NULL
})
return(list(
plot = combined_plot,
table = table_list %>% htmltools::tagList() %>% htmltools::browsable(),
summary = summary_list %>% htmltools::tagList() %>% htmltools::browsable()
))
} else {
net <- build_network_plot(dfm_td)
if (is.null(net)) {
message("No network generated.")
return(NULL)
}
return(list(
plot = net$plot,
table = build_table(net, if (!is.null(doc_var)) paste("Network Centrality Table for", doc_var) else "Network Centrality Table") %>% htmltools::browsable(),
summary = build_summary(net, if (!is.null(doc_var)) paste("Network Summary for", doc_var) else "Network Summary") %>% htmltools::browsable()
))
}
}
results <- word_correlation_network(
dfm_object,
common_term_n = 100,
top_node_n = 30,
height = 800,
width = 900)
results <- word_correlation_network(
dfm_object,
common_term_n = 100, corr_n = 0.4,
top_node_n = 30,
height = 800,
width = 900)
results$plot
results <- word_correlation_network(
dfm_object,
common_term_n = 30, corr_n = 0.4,
top_node_n = 30,
height = 800,
width = 900)
results$plot
results <- word_correlation_network(
dfm_object, doc_var = "reference_type",
common_term_n = 30, corr_n = 0.4,
top_node_n = 30,
height = 800,
width = 900)
results$plot
word_correlation_network <- function(dfm_object,
doc_var = NULL,
common_term_n = 130,
corr_n = 0.4,
top_node_n = 40,
height = 1000,
width = 900) {
if (!requireNamespace("htmltools", quietly = TRUE) ||
!requireNamespace("RColorBrewer", quietly = TRUE)) {
stop(
"The 'htmltools' and 'RColorBrewer' packages are required for this functionality. ",
"Please install them using install.packages(c('htmltools', 'RColorBrewer'))."
)
}
dfm_td <- tidytext::tidy(dfm_object)
docvars_df <- dfm_object@docvars
docvars_df$document <- docvars_df$docname_
dfm_td <- dplyr::left_join(dfm_td, docvars_df, by = "document")
if (!is.null(doc_var) && !doc_var %in% colnames(dfm_td)) {
warning("Column ", doc_var, " not found. Ignoring grouping.")
doc_var <- NULL
}
if (!is.null(doc_var) && doc_var %in% colnames(dfm_td)) {
docvar_levels <- unique(dfm_td[[doc_var]])
print(paste("doc_var has", length(docvar_levels), "levels:", paste(docvar_levels, collapse = ", ")))
} else {
docvar_levels <- NULL
}
build_table <- function(net, group_label) {
layout_dff <- net$layout_df %>%
dplyr::select(-c("x", "y")) %>%
dplyr::mutate_if(is.numeric, round, digits = 3)
table <- DT::datatable(layout_dff, rownames = FALSE,
extensions = 'Buttons',
options = list(scrollX = TRUE,
width = "80%",
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%
DT::formatStyle(columns = colnames(layout_dff), `font-size` = "16px")
htmltools::tagList(
htmltools::tags$div(
style = "margin-bottom: 20px;",
htmltools::tags$p(
group_label,
style = "font-weight: bold; text-align: center; font-size: 14pt;"
)
),
table
)
}
build_summary <- function(net, group_label) {
g <- net$graph
summary_df <- data.frame(
Metric = c("Nodes", "Edges", "Density", "Diameter",
"Global Clustering Coefficient", "Local Clustering Coefficient (Mean)",
"Modularity", "Assortativity", "Geodesic Distance (Mean)"),
Value = c(
igraph::vcount(g),
igraph::ecount(g),
igraph::edge_density(g),
igraph::diameter(g),
igraph::transitivity(g, type = "global"),
mean(igraph::transitivity(g, type = "local"), na.rm = TRUE),
igraph::modularity(g, membership = igraph::V(g)$community),
igraph::assortativity_degree(g),
mean(igraph::distances(g)[igraph::distances(g) != Inf], na.rm = TRUE)
)
) %>%
dplyr::mutate_if(is.numeric, round, digits = 3)
summary_table <- DT::datatable(summary_df, rownames = FALSE,
extensions = 'Buttons',
options = list(scrollX = TRUE,
width = "80%",
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%
DT::formatStyle(columns = colnames(summary_df), `font-size` = "16px")
htmltools::tagList(
htmltools::tags$div(
style = "margin-bottom: 20px;",
htmltools::tags$p(
group_label,
style = "font-weight: bold; text-align: center; font-size: 14pt;"
)
),
summary_table
)
}
build_network_plot <- function(data, group_level = NULL) {
term_cor <- data %>%
group_by(term) %>%
filter(n() >= common_term_n) %>%
widyr::pairwise_cor(term, document, sort = TRUE) %>%
filter(correlation > corr_n)
graph <- igraph::graph_from_data_frame(term_cor, directed = FALSE)
if(igraph::vcount(graph) == 0) {
message("No correlation relationships meet the threshold.")
return(NULL)
}
igraph::V(graph)$degree      <- igraph::degree(graph)
igraph::V(graph)$betweenness <- igraph::betweenness(graph)
igraph::V(graph)$closeness   <- igraph::closeness(graph)
igraph::V(graph)$eigenvector <- igraph::eigen_centrality(graph)$vector
igraph::V(graph)$community   <- igraph::cluster_leiden(graph)$membership
layout_mat <- igraph::layout_with_fr(graph)
layout_df <- as.data.frame(layout_mat) %>% stats::setNames(c("x", "y"))
layout_df <- layout_df %>%
dplyr::mutate(label       = igraph::V(graph)$name,
degree      = igraph::V(graph)$degree,
betweenness = igraph::V(graph)$betweenness,
closeness   = igraph::V(graph)$closeness,
eigenvector = igraph::V(graph)$eigenvector,
community   = igraph::V(graph)$community)
edge_data <- igraph::as_data_frame(graph, what = "edges") %>%
dplyr::mutate(x    = layout_df$x[match(from, layout_df$label)],
y    = layout_df$y[match(from, layout_df$label)],
xend = layout_df$x[match(to, layout_df$label)],
yend = layout_df$y[match(to, layout_df$label)],
correlation = correlation) %>%
dplyr::select(from, to, x, y, xend, yend, correlation) %>%
dplyr::mutate(line_group = as.integer({
b <- unique(stats::quantile(correlation, probs = seq(0, 1, length.out = 6), na.rm = TRUE))
if (length(b) < 2) {
b <- c(b, b[length(b)] + 1e-6)
}
cut(correlation, breaks = b, include.lowest = TRUE)
}),
line_width = scales::rescale(line_group, to = c(1, 5)),
alpha      = scales::rescale(line_group, to = c(0.1, 0.3)))
edge_group_labels <- edge_data %>%
group_by(line_group) %>%
dplyr::summarise(
min_corr = min(correlation, na.rm = TRUE),
max_corr = max(correlation, na.rm = TRUE)
) %>%
dplyr::mutate(label = paste0("Correlation: ", round(min_corr, 2), " - ", round(max_corr, 2))) %>%
dplyr::pull(label)
node_data <- layout_df %>%
dplyr::mutate(
degree_log = log1p(degree),
size = scales::rescale(degree_log, to = c(12, 30)),
text_size = scales::rescale(degree_log, to = c(14, 20)),
alpha = scales::rescale(degree_log, to = c(0.2, 1)),
hover_text = paste(
"Word:", label,
"<br>Degree:", degree,
"<br>Betweenness:", round(betweenness, 2),
"<br>Closeness:", round(closeness, 2),
"<br>Eigenvector:", round(eigenvector, 2),
"<br>Community:", community,
if (!is.null(doc_var)) {
if (length(docvar_levels) > 1) {
paste0("<br>", doc_var, ": ", group_level)
} else {
paste0("<br>", doc_var)
}
} else ""
)
)
n_communities <- length(unique(node_data$community))
if (n_communities >= 3 && n_communities <= 8) {
palette <- RColorBrewer::brewer.pal(n_communities, "Set2")
} else if (n_communities > 8) {
palette <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Set2"))(n_communities)
} else if (n_communities > 0 && n_communities < 3) {
palette <- RColorBrewer::brewer.pal(3, "Set2")[1:n_communities]
} else {
palette <- rep("#000000", n_communities)
}
node_data$community <- factor(node_data$community, levels = unique(node_data$community))
community_levels <- levels(node_data$community)
names(palette) <- community_levels
node_data$color <- palette[as.character(node_data$community)]
p <- plotly::plot_ly(type = 'scatter', mode = 'markers', width = width, height = height)
for (lg in unique(edge_data$line_group)) {
esub <- dplyr::filter(edge_data, line_group == lg) %>%
dplyr::mutate(mid_x = (x + xend) / 2,
mid_y = (y + yend) / 2)
if (nrow(esub) > 0) {
p <- p %>%
plotly::add_segments(data = esub, x = ~x, y = ~y,
xend = ~xend, yend = ~yend,
line = list(color = '#5C5CFF', width = ~line_width),
hoverinfo = 'none', opacity = ~alpha,
showlegend = TRUE, name = edge_group_labels[lg],
legendgroup = "Edges") %>%
plotly::add_trace(data = esub, x = ~mid_x, y = ~mid_y, type = 'scatter',
mode = 'markers',
marker = list(size = 0.1, color = '#e0f7ff', opacity = 0),
text = ~paste("Correlation:", correlation,
"<br>Source:", from,
"<br>Target:", to),
hoverinfo = 'text', showlegend = FALSE)
}
}
for(comm in community_levels) {
comm_data <- dplyr::filter(node_data, community == comm)
p <- p %>% plotly::add_markers(data = comm_data, x = ~x, y = ~y,
marker = list(size = ~size, color = palette[comm],
showscale = FALSE,
line = list(width = 3, color = '#FFFFFF')),
hoverinfo = 'text', text = ~hover_text,
showlegend = TRUE, name = paste("Community", comm),
legendgroup = "Community")
}
top_nodes <- dplyr::arrange(node_data, desc(degree)) %>% head(top_node_n)
annotations <- lapply(1:nrow(top_nodes), function(i) {
list(x = top_nodes$x[i],
y = top_nodes$y[i],
text = top_nodes$label[i],
xanchor = ifelse(top_nodes$x[i] > 0, "left", "right"),
yanchor = ifelse(top_nodes$y[i] > 0, "bottom", "top"),
xshift = ifelse(top_nodes$x[i] > 0, 5, -5),
yshift = ifelse(top_nodes$y[i] > 0, 3, -3),
showarrow = FALSE,
font = list(size = top_nodes$text_size[i], color = 'black'))
})
p <- p %>% plotly::layout(dragmode = "pan",
title = list(text = "<b>Word Correlation Network</b>", font = list(size = 16)),
showlegend = TRUE,
xaxis = list(title = "", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(title = "", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
margin = list(l = 40, r = 100, t = 60, b = 40),
annotations = annotations,
legend = list(title = list(text = "Correlation"),
orientation = "v", x = 1.1, y = 1,
xanchor = "left", yanchor = "top"))
list(plot = p, layout_df = layout_df, graph = graph)
}
if (!is.null(doc_var) && length(docvar_levels) > 1) {
plots_list <- dfm_td %>%
dplyr::ungroup() %>%
dplyr::group_by(!!rlang::sym(doc_var)) %>%
dplyr::group_map(~ {
group_level <- .y[[doc_var]]
print(paste("Processing group level:", group_level))
if (is.null(group_level)) {
stop("doc_var is missing or not found in the current group")
}
net <- build_network_plot(.x, group_level)
if (!is.null(net)) {
net$plot %>% plotly::layout(
annotations = list(
list(
text = paste("<b>", group_level, "</b>"),
x = 0.42,
xanchor = "center",
y = 0.98,
yanchor = "bottom",
yref = "paper",
showarrow = FALSE,
font = list(size = 19, color = "black", family = "Arial")
)
)
)
} else {
NULL
}
})
combined_plot <- plotly::subplot(plots_list, nrows = 1, shareX = TRUE, shareY = TRUE,
titleX = TRUE, titleY = TRUE)
table_list <- lapply(docvar_levels, function(level) {
print(paste("Generating table for level:", level))
group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)
net <- build_network_plot(group_data)
if (!is.null(net)) build_table(net, level) else NULL
})
summary_list <- lapply(docvar_levels, function(level) {
print(paste("Generating summary for level:", level))
group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)
net <- build_network_plot(group_data)
if (!is.null(net)) build_summary(net, level) else NULL
})
return(list(
plot = combined_plot,
table = table_list %>% htmltools::tagList() %>% htmltools::browsable(),
summary = summary_list %>% htmltools::tagList() %>% htmltools::browsable()
))
} else {
net <- build_network_plot(dfm_td)
if (is.null(net)) {
message("No network generated.")
return(NULL)
}
return(list(
plot = net$plot,
table = build_table(net, if (!is.null(doc_var)) paste("Network Centrality Table for", doc_var) else "Network Centrality Table") %>% htmltools::browsable(),
summary = build_summary(net, if (!is.null(doc_var)) paste("Network Summary for", doc_var) else "Network Summary") %>% htmltools::browsable()
))
}
}
results <- word_correlation_network(
dfm_object, doc_var = "reference_type",
common_term_n = 30, corr_n = 0.4,
top_node_n = 30,
height = 800,
width = 900)
results$plot
shiny::runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
runApp('inst/TextAnalysisR.app')
shiny::runApp('inst/TextAnalysisR.app')
shiny::runApp()
runApp()
runApp()
runApp()
